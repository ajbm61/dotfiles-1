#!/bin/sh

set -e
unset CDPATH
unset IFS

show_usage() {
    cat <<EOT
Usage: $(basename "$0") [-h|--help] [--version] [-V]
    or $(basename "$0") <command> [<args>]

Commands:

  install <version>   Install a PHP version
  versions            List all available PHP versions
  reload-symlinks     Reloads ~/bin/_php{version} symlinks

EOT
}

list_available_versions() {
    if test -d "$PREFIX/versions"; then
        for version in "$PREFIX/versions/"*; do
            prefix="  "
            postfix=""

            if test -d "$version"; then
                name="${version##*/}"

                if test -L "$version"; then
                    resolved="$(readlink -nf "$version")"
                    postfix=" -> ${resolved##*/}"
                fi
            fi

            echo "${prefix}${name}${postfix}"
        done | sort -V
    fi
}

install_version() {
    version="$1"

    if test -z "$version"; then
        echo >&2 "$(basename "$0"): version is required"
        exit 1
    fi

    if test ! -d "$PREFIX/versions"; then
        mkdir -p "$PREFIX/versions"
    fi

    prefix="$PREFIX/versions/$(basename "$version")"

    if test -e "$prefix"; then
        echo >&2 "$(basename "$0"): version already exists"
        exit 1
    fi

    # TODO auto create/update symlinks for latest .x versions i.e. if 7.x
    # points to 7.0.5 and installing 7.0.6 and it is latest 7.x version then
    # point 7.x at 7.0.6.

    echo "install version: $version"
    echo "install prefix: $prefix"

    exec "$BUILD_BIN" --ini development "$version" "$prefix"
}

fixup_x_version() {
    source="$1"
    target="$2"

    source_path="$HOME/.phpenv/versions/$source"
    target_path="$HOME/.phpenv/versions/$target"

    echo
    echo "  source: $source_path"
    echo "  target: $target_path"

    if test ! -d "$source_path"; then
        echo >&2 "ERROR: expected a directory: $source_path"
        return
    fi

    if test -e "$target_path"; then
        if test -h "$target_path"; then
            rm -v "$target_path"
        else
            echo >&2 "ERROR: expected a symbolic file: $target_path"
            return
        fi
    fi

    ln -s -r "$source_path" "$target_path"
}

reload_symlinks() {
    echo "reload symbolic links"

    # TODO rework hardcoded logic
    fixup_x_version "5.5.38" "5.5.x"
    fixup_x_version "5.6.30" "5.6.x"
    fixup_x_version "7.0.10" "7.0.x"
    fixup_x_version "7.1.12" "7.1.x"
    fixup_x_version "5.6.30" "5.x"
    fixup_x_version "7.2.0"  "7.x"

    # TODO refactor hardcoded paths
    for version_path in ~/.phpenv/versions/*; do
        if test ! -d "$version_path"; then
            continue
        fi

        version="$(basename "$version_path")"
        version_source="$version_path/bin/php"
        version_target="$HOME/bin/_php$version"

        echo
        echo "processing:"
        echo "  version:        $version"
        echo "  version path:   $version_path"
        echo "  version source: $version_source"
        echo "  version target: $version_target"

        if test -e "$version_target"; then
            if test -h "$version_target"; then
                rm -v "$version_target"
            else
                echo >&2 "ERROR: expected a symbolic file: $version_target"
                continue
            fi
        fi

        ln -s "$version_source" "$version_target"

    done

    tree -L 1 ~/.phpenv/versions/
}

readonly VERSION="0.4.2"
readonly PREFIX="$HOME/.phpenv"
readonly BUILD_BIN="$HOME/bin/php-build"

if test ! -f "$BUILD_BIN" || test ! -x "$BUILD_BIN"; then
    echo >&2 "$(basename "$0"): $(basename "$BUILD_BIN") not found"
    exit 1
fi

test "$#" = 0 && show_usage && exit 0

while test "$#" != 0; do
    case "$1" in
        -h|--help) show_usage; exit 0 ;;
        --version) echo "phpenv version $VERSION"; exit 0 ;;
        -V) echo "$VERSION"; exit 0 ;;
        install)
            if test "$2" = "--complete"; then
                exec "$BUILD_BIN" --definitions
            fi

            shift
            install_version "$@"

            # TODO move into a local hook i.e. so that it's not a dependency to run phpenv
            for phpenv_version_etc_conf_d in ~/.phpenv/versions/*/etc/conf.d; do
                test -d "$phpenv_version_etc_conf_d" || continue
                # Default local development overrides
                ln -vfs "$PROJECTS_PATH/lde/lde/etc/php/conf.d/90-lde.ini" "$phpenv_version_etc_conf_d/90-lde.ini"
                # Local development overrides
                touch "$phpenv_version_etc_conf_d/95-development.ini"
            done

            reload_symlinks
            exit 0
            ;;
        reload-symlinks)
            reload_symlinks
            exit 0
            ;;
        versions)
            list_available_versions
            exit 0
            ;;
        --) shift; break ;; # standard end of options list
        -*) echo >&2 "$(basename "$0"): unknown option '$1'"; exit 1 ;;
        *)  echo >&2 "$(basename "$0"): unknown argument '$1'"; exit 1 ;;
    esac
    shift
done
